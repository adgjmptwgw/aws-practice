AWSTemplateFormatVersion: "2010-09-09"
# ------------------------------------------------------------#
# README
# ------------------------------------------------------------#
# - "環境名-test-bastion-ec2-role" はマネコンにて作成してください。インスタンスプロファイルロールでないと、EC2のリソースにIAMをアタッチできません。
#   - ロール作成画面の 「信頼されたエンティティタイプ > AWS のサービス」を選択し、「ユースケース」は"EC2"を選択して作成して下さい。

# ------------------------------------------------------------#
# Template Description
# ------------------------------------------------------------#
Description: ""
Metadata:
  "AWS::CloudFormation::Interface":
    ParameterGroups:
      - Label:
          default: "Environment Variable Configs"
        Parameters:
          - EnvConfig

      - Label:
          default: "Project prefix"
        Parameters:
          - PJPrefix

      - Label:
          default: "EC2Instance Configuration"
        Parameters:
          - EC2InstanceAMI
          - EC2InstanceInstanceType
          - EC2InstanceVolumeType
          - EC2InstanceVolumeSize

    ParameterLabels:
      EC2InstanceAMI:
        default: "EC2 AMI"
      EC2InstanceInstanceType:
        default: "EC2 InstanceType"
      EC2InstanceVolumeType:
        default: "EC2 VolumeType"
      EC2InstanceVolumeSize:
        default: "EC2 VolumeSize"

# ------------------------------------------------------------#
# Input Parameters
# ------------------------------------------------------------# 
Parameters:
  # NOTE: 環境変数を変更するだけで、別々の環境のリソースを作成できます。
  EnvConfig:
    Type: String
    AllowedValues:
      - dev
      - stg
      - prod
    Default: "dev"

  PJPrefix:
    Type: String
    Default: "pjPrefix"

  EC2InstanceAMI:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    # 下記の公式ドキュメントに乗っ取り、AMIは特段カスタマイズするわけではない為、"minimal" ではなく、通常の"default"AMIを使用
    # https://docs.aws.amazon.com/linux/al2023/ug/AMI-minimal-and-standard-differences.html
    Default: '/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64'

  EC2InstanceInstanceType:
    Type: String
    Default: "t2.micro"

  EC2InstanceVolumeType:
    Type: String
    Default: "gp3"

  EC2InstanceVolumeSize:
    Type: String
    Default: "8"

Resources:
  EC2Instance:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: !Ref EC2InstanceAMI
      InstanceType: !Ref EC2InstanceInstanceType
      AvailabilityZone: "ap-northeast-1a"
      Tenancy: "default"
      SubnetId: { "Fn::ImportValue": !Sub "${EnvConfig}-${PJPrefix}-subnet-1-a-private" }
      EbsOptimized: false
      SecurityGroupIds: 
        - { "Fn::ImportValue": !Sub "${EnvConfig}-${PJPrefix}-bastion-sg" }
      SourceDestCheck: true
      BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
            Encrypted: false
            VolumeSize: !Ref EC2InstanceVolumeSize
            VolumeType: !Ref EC2InstanceVolumeType
            DeleteOnTermination: true
      IamInstanceProfile: !Sub "${EnvConfig}-${PJPrefix}-bastion-ec2-role"
      Tags:
        - Key: "Name"
          Value: !Sub "${EnvConfig}-${PJPrefix}-bastion-ec2"
      HibernationOptions:
        Configured: false
      EnclaveOptions:
        Enabled: false
      LaunchTemplate:
        LaunchTemplateId: !Ref Ec2InstanceLaunchTemplate
        Version: !GetAtt Ec2InstanceLaunchTemplate.LatestVersionNumber

  # 起動テンプレート
  Ec2InstanceLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        MetadataOptions:
          HttpTokens: "required"
