AWSTemplateFormatVersion: "2010-09-09"
# ------------------------------------------------------------#
# README
# ------------------------------------------------------------#
# - VPCエンドポイントのTagはCloudFormationでサポートされていないため、手動で設定する必要があります。
# - privateサブネットはアプリ配置用とRDS配置用で別々に作成する必要がある。

# ------------------------------------------------------------#
# Template Description
# ------------------------------------------------------------#
Description: ""
Metadata:
  "AWS::CloudFormation::Interface":
    ParameterGroups:
      - Label:
          default: "Environment Variable configs"
        Parameters:
          - EnvConfig
      - Label:
          default: "Project prefix"
        Parameters:
          - PJPrefix
      - Label:
          default: "Network Configuration"
        Parameters:
          - VPCCIDR
          - PublicSubnet0ACIDR
          - PrivateSubnet1ACIDR
          - PublicSubnet2CCIDR
          - PrivateSubnet3CCIDR
          - PublicSubnet4DCIDR
          - PrivateSubnet5DCIDR
          - PrivateSubnet6ACIDR
          - PrivateSubnet7CCIDR

    ParameterLabels:
      VPCCIDR:
        default: "VPC CIDR"
      PublicSubnet0ACIDR:
        default: "PublicSubnet-0 A CIDR"
      PrivateSubnet1ACIDR:
        default: "PrivateSubnet-1 A CIDR"
      PublicSubnet2CCIDR:
        default: "PublicSubnet-2 C CIDR"
      PrivateSubnet3CCIDR:
        default: "PrivateSubnet-3 C CIDR"
      PublicSubnet4DCIDR:
        default: "PublicSubnet-4 D CIDR"
      PrivateSubnet5DCIDR:
        default: "PrivateSubnet-5 D CIDR"
      PrivateSubnet6ACIDR:
        default: "PrivateSubnet-6 A CIDR"
      PrivateSubnet7CCIDR:
        default: "PrivateSubnet-7 C CIDR"

# ------------------------------------------------------------#
# Input Parameters
# ------------------------------------------------------------#
Parameters:
  # NOTE: 環境変数を変更するだけで、別々の環境のリソースを作成できます。
  EnvConfig:
    Type: String
    AllowedValues:
      - dev
      - stg
      - prod
    Default: "dev"

  PJPrefix:
    Type: String
    Default: "pjPrefix"

  VPCCIDR:
    Type: String
    Default: "10.0.0.0/16"

  PublicSubnet0ACIDR:
    Type: String
    Default: "10.0.16.0/20"

  PrivateSubnet1ACIDR:
    Type: String
    Default: "10.0.32.0/20"

  PublicSubnet2CCIDR:
    Type: String
    Default: "10.0.48.0/20"

  PrivateSubnet3CCIDR:
    Type: String
    Default: "10.0.64.0/20"

  PublicSubnet4DCIDR:
    Type: String
    Default: "10.0.80.0/20"

  PrivateSubnet5DCIDR:
    Type: String
    Default: "10.0.96.0/20"
    
  PrivateSubnet6ACIDR:
    Type: String
    Default: "10.0.112.0/20"

  PrivateSubnet7CCIDR:
    Type: String
    Default: "10.0.128.0/20"

# ------------------------------------------------------------#
# Conditions
# ------------------------------------------------------------#
Conditions:
  IsNotDev: !Or
    - !Equals [!Ref EnvConfig, "prod"]
    - !Equals [!Ref EnvConfig, "stg"]

Resources:
  # ------------------------------------------------------------#
  #  VPC
  # ------------------------------------------------------------#
  # VPC
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: "default"
      Tags:
        - Key: "Name"
          Value: !Sub ${EnvConfig}-${PJPrefix}-vpc

  # ------------------------------------------------------------#
  #  Subnet
  # ------------------------------------------------------------#
  # A-AZに配置するPublicサブネット
  PublicSubnet0A:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}a"
      CidrBlock: !Ref PublicSubnet0ACIDR
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: false
      Tags:
        - Key: "Name"
          Value: !Sub ${EnvConfig}-${PJPrefix}-subnet-0-a-public

  # A-AZに配置するPrivateサブネット
  PrivateSubnet1A:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}a"
      CidrBlock: !Ref PrivateSubnet1ACIDR
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: false
      Tags:
        - Key: "Name"
          Value: !Sub ${EnvConfig}-${PJPrefix}-subnet-1-a-private

  # C-AZに配置す-Publicサブネット
  PublicSubnet2C:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}c"
      CidrBlock: !Ref PublicSubnet2CCIDR
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: false
      Tags:
        - Key: "Name"
          Value: !Sub ${EnvConfig}-${PJPrefix}-subnet-2-c-public

  # C-AZに配置するPrivateサブネット
  PrivateSubnet3C:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}c"
      CidrBlock: !Ref PrivateSubnet3CCIDR
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: false
      Tags:
        - Key: "Name"
          Value: !Sub ${EnvConfig}-${PJPrefix}-subnet-3-c-private

  # D-AZに配置するPublicサブネット
  PublicSubnet4D:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}d"
      CidrBlock: !Ref PublicSubnet4DCIDR
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: false
      Tags:
        - Key: "Name"
          Value: !Sub ${EnvConfig}-${PJPrefix}-subnet-4-d-public

  # D-AZに配置するPrivateサブネット
  PrivateSubnet5D:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}d"
      CidrBlock: !Ref PrivateSubnet5DCIDR
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: false
      Tags:
        - Key: "Name"
          Value: !Sub ${EnvConfig}-${PJPrefix}-subnet-5-d-private

  PrivateSubnet6A:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}a"
      CidrBlock: !Ref PrivateSubnet6ACIDR
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: false
      Tags:
        - Key: "Name"
          Value: !Sub ${EnvConfig}-${PJPrefix}-subnet-6-a-private

  PrivateSubnet7C:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}c"
      CidrBlock: !Ref PrivateSubnet7CCIDR
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: false
      Tags:
        - Key: "Name"
          Value: !Sub ${EnvConfig}-${PJPrefix}-subnet-7-c-private

  # ------------------------------------------------------------#
  #  Internet Gateway
  # ------------------------------------------------------------#
  # Internet Gateway作成
  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: "Name"
          Value: !Sub ${EnvConfig}-${PJPrefix}-igw

  # IGWをVPCにアタッチ
  InternetGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # ------------------------------------------------------------#
  #  NAT Gateway
  # ------------------------------------------------------------#
  # A-AZに配置するNatGateway
  NatGatewayA:
    Type: "AWS::EC2::NatGateway"
    Properties:
      SubnetId: !Ref PublicSubnet0A
      Tags:
        - Key: "Name"
          Value: !Sub ${EnvConfig}-${PJPrefix}-natgateway-a
      AllocationId: !GetAtt NatGatewayAEIP.AllocationId

  # C-AZに配置するNatGateway
  NatGatewayC:
    Type: "AWS::EC2::NatGateway"
    Condition: IsNotDev
    Properties:
      SubnetId: !Ref PublicSubnet2C
      Tags:
        - Key: "Name"
          Value: !Sub ${EnvConfig}-${PJPrefix}-natgateway-c
      AllocationId: !GetAtt NatGatewayCEIP.AllocationId

  # NatGatewayAに紐づくEIPを作成
  NatGatewayAEIP:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: "vpc"
      Tags:
        - Key: Name
          Value: !Sub ${EnvConfig}-${PJPrefix}-elasticip-a

  # NatGatewayCに紐づくEIPを作成
  NatGatewayCEIP:
    Type: "AWS::EC2::EIP"
    Condition: IsNotDev
    Properties:
      Domain: "vpc"
      Tags:
        - Key: Name
          Value: !Sub ${EnvConfig}-${PJPrefix}-elasticip-c

  # ------------------------------------------------------------#
  #  VPC Endpoint(gatewayタイプのみこちらへ記載)
  # ------------------------------------------------------------#
  # S3用VPCエンドポイント
  S3VPCEndpoint:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      VpcEndpointType: "Gateway"
      VpcId: !Ref VPC
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"
      PolicyDocument: '{"Version":"2008-10-17","Statement":[{"Effect":"Allow","Principal":"*","Action":"*","Resource":"*"}]}'
      RouteTableIds:
        - !Ref "PrivateRouteTable1A"
        - !Ref "PrivateRouteTable3C"
      PrivateDnsEnabled: false

  # ------------------------------------------------------------#
  #  RouteTable
  # ------------------------------------------------------------#
  # Publicルートテーブルを作成（A/C-Publicサブネット => Internet Gateway）
  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: !Sub ${EnvConfig}-${PJPrefix}-public-route

  # A-Privateルートテーブルを作成（A-Privateサブネット => A-NAT Gateway, S3用VPCエンドポイント）
  PrivateRouteTable1A:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: !Sub ${EnvConfig}-${PJPrefix}-route-1-a-private

  # C-Privateルートテーブルを作成（C-Privateサブネット => C-NAT Gateway）
  PrivateRouteTable3C:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: !Sub ${EnvConfig}-${PJPrefix}-route-3-c-private

  # ------------------------------------------------------------#
  # Routing
  # ------------------------------------------------------------#
  # Publicルートを作成（Publicルートテーブル => Internet Gateway）
  PublicRoute:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable

  # Privateルートを作成（A-Privateルートテーブル => A-NAT Gateway）
  PrivateRoute1A:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NatGatewayA
      RouteTableId: !Ref PrivateRouteTable1A

  # Privateルートを作成（C-Privateルートテーブル => C-NAT Gateway）
  PrivateRoute3C:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !If [IsNotDev, !Ref NatGatewayC, !Ref NatGatewayA]
      RouteTableId: !Ref PrivateRouteTable3C

  # ------------------------------------------------------------#
  # RouteTable Associate
  # ------------------------------------------------------------#
  # A-AZのPublicサブネット - Publicルートテーブルの関連付け
  PublicSubnet0ARouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet0A

  # A-AZのPrivateサブネット - A-Privateルートテーブルの関連付け
  PrivateSubnet1ARouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PrivateRouteTable1A
      SubnetId: !Ref PrivateSubnet1A

  PrivateSubnet6ARouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PrivateRouteTable1A
      SubnetId: !Ref PrivateSubnet6A

  # C-AZのPublicサブネット - Publicルートテーブルの関連付け
  PublicSubnet2CRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2C

  # C-AZのPrivateサブネット - C-Privateルートテーブルの関連付け
  PrivateSubnet3CRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PrivateRouteTable3C
      SubnetId: !Ref PrivateSubnet3C

  PrivateSubnet7CRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PrivateRouteTable3C
      SubnetId: !Ref PrivateSubnet7C

  # ------------------------------------------------------------#
  #  Flow Log
  # ------------------------------------------------------------#
  # VPCフローログ
  VPCFlowLog:
    Type: "AWS::EC2::FlowLog"
    Properties:
      ResourceId: !Ref VPC
      TrafficType: "REJECT"
      LogDestinationType: "s3"
      # TODO: VPCフローログのバケット名を記載
      LogDestination: !Sub "arn:aws:s3:::${EnvConfig}-${PJPrefix}-bucket-name/vpcflowlogs/"
      ResourceType: "VPC"
      LogFormat: "${version} ${account-id} ${interface-id} ${srcaddr} ${dstaddr} ${srcport} ${dstport} ${protocol} ${packets} ${bytes} ${start} ${end} ${action} ${log-status}"
      MaxAggregationInterval: 600
      Tags:
        - Key: "Name"
          Value: !Sub "${EnvConfig}-${PJPrefix}-vpc-flow-log"

# ------------------------------------------------------------#
# Output Parameters
# ------------------------------------------------------------#
Outputs:
  # VPC
  VPC:
    Value: !Ref VPC
    Export:
      Name: !Sub ${EnvConfig}-${PJPrefix}-vpc

  # A-AZに配置するPublicサブネット
  PublicSubnet0A:
    Value: !Ref PublicSubnet0A
    Export:
      Name: !Sub ${EnvConfig}-${PJPrefix}-subnet-0-a-public

  # A-AZに配置するPrivateサブネット
  PrivateSubnet1A:
    Value: !Ref PrivateSubnet1A
    Export:
      Name: !Sub ${EnvConfig}-${PJPrefix}-subnet-1-a-private

  # C-AZに配置するPublicサブネット
  PublicSubnet2C:
    Value: !Ref PublicSubnet2C
    Export:
      Name: !Sub ${EnvConfig}-${PJPrefix}-subnet-2-c-public

  # C-AZに配置するPrivateサブネット
  PrivateSubnet3C:
    Value: !Ref PrivateSubnet3C
    Export:
      Name: !Sub ${EnvConfig}-${PJPrefix}-subnet-3-c-private

  # C-AZに配置するPublicサブネット
  PublicSubnet4D:
    Value: !Ref PublicSubnet4D
    Export:
      Name: !Sub ${EnvConfig}-${PJPrefix}-subnet-4-d-public

  # C-AZに配置するPrivateサブネット
  PrivateSubnet5D:
    Value: !Ref PrivateSubnet5D
    Export:
      Name: !Sub ${EnvConfig}-${PJPrefix}-subnet-5-d-private

  # A-AZに配置するPrivateサブネット
  PrivateSubnet6A:
    Value: !Ref PrivateSubnet6A
    Export:
      Name: !Sub ${EnvConfig}-${PJPrefix}-subnet-6-a-private

  # C-AZに配置するPrivateサブネット
  PrivateSubnet7C:
    Value: !Ref PrivateSubnet7C
    Export:
      Name: !Sub ${EnvConfig}-${PJPrefix}-subnet-7-c-private
