AWSTemplateFormatVersion: "2010-09-09"
# ------------------------------------------------------------#
# README
# ------------------------------------------------------------#
# - サービスリンクロールを作成後にスタックを作成してください。Proxyの RoleArnでエラーが出ます。
# - テンプレート作成前にRDSProxyにアクセスするためのシークレットマネージャー
# - テンプレート作成後、Proxyの認証として管理ユーザー用、システムユーザー用のシークレットを追加してください。
#   また、ProxyのIAMロール内にSecrets Managerからパラメータを取得を許可するポリシーがある為、そこで管理ユーザー用、システムユーザー用のシークレットARNが指定されているか確認してださい。

# ------------------------------------------------------------#
# Template Description
# ------------------------------------------------------------#
Description: ""
Metadata:
  "AWS::CloudFormation::Interface":
    ParameterGroups:
      - Label:
          default: "Environment Variable Configs"
        Parameters:
          - EnvConfig
      - Label:
          default: "Project prefix"
        Parameters:
          - PJPrefix
      - Label:
          default: "RDS Configuration"
        Parameters:
          - DBInstanceName
          - DBInstanceClass
          - IsEncryptedStorage
      - Label:
          default: "RDS Proxy Configuration"
        Parameters:
          - ProxyEngineFamily

    ParameterLabels:
      DBInstanceName:
        default: "DBInstanceName"
      DBInstanceClass:
        default: "DBInstanceClass"
      IsEncryptedStorage:
        default: "IsEncryptedStorage"
      ProxyEngineFamily:
        default: "ProxyEngineFamily"

# ------------------------------------------------------------#
# Input Parameters
# ------------------------------------------------------------#
Parameters:
  # NOTE: 環境変数を変更するだけで、別々の環境のリソースを作成できます。
  EnvConfig:
    Type: String
    Default: "dev"
    AllowedValues:
      - dev
      - stg
      - prod
  PJPrefix:
    Type: String
    Default: "pjPrefix"

  # RDS用
  DBInstanceName:
    Type: String
    Default: "rds-instance"
  DBInstanceClass:
    Type: String
    Default: "db.t3.medium"
    AllowedValues:
      - db.t3.medium
  DBEngineType:
    Type: String
    Default: "aurora-mysql"
    AllowedValues:
      - aurora-mysql
      - aurora-postgresql
      - mysql
      - postgres
  DBEngineVersion:
    Type: String
    Default: "8.0.mysql_aurora.3.06.0"
  IsEncryptedStorage:
    Default: "true"
    Type: String
    AllowedValues: ["true", "false"]
  DBName:
    Type: String
    Default: "project_name_db"
  DBUserName:
    Type: String
    Default: "root"
    NoEcho: true
    MinLength: 1
    MaxLength: 32
  DBPort:
    Type: Number
    Default: 3306
  DBPasswordForAdmin:
    Default: "password"
    NoEcho: true
    Type: String
    MinLength: 8
    MaxLength: 41
  DBClusterName:
    Type: String
    Default: "rds-cluster"
  # Proxy用
  ProxyEngineFamily:
    Type: String
    Default: MYSQL
    AllowedValues:
      - MYSQL
      - POSTGRESQL
      - SQLSERVER
  DBProxyName:
    Type: String
    Default: "rds-cluster-proxy"
  SecretManagerArn:
    Type: String
    Default: ""

# ------------------------------------------------------------#
# Conditions
# ------------------------------------------------------------#
Conditions:
  IsCreateResource: !Or
    - !Equals [!Ref EnvConfig, "prod"]
    - !Equals [!Ref EnvConfig, "stg"]

# ------------------------------------------------------------#
# Mapping
# ------------------------------------------------------------#
Mappings:
  RDS:
    dev:
      BackupRetentionPeriod: 1
      EnableCloudwatchLogsExports: []
    stg:
      BackupRetentionPeriod: 7
      EnableCloudwatchLogsExports: [ "audit", "error" ]
    prod:
      BackupRetentionPeriod: 7
      EnableCloudwatchLogsExports: [ "audit", "error" ]

Resources:
  # ------------------------------------------------------------#
  #  DBSubnetGroup
  # ------------------------------------------------------------#
  DBSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupName: !Sub "${EnvConfig}-${PJPrefix}-${DBInstanceName}-subnetgroup"
      DBSubnetGroupDescription: !Sub "${EnvConfig}-${PJPrefix}-${DBInstanceName}-subnet-group"
      SubnetIds:
        - {
            "Fn::ImportValue": !Sub "${EnvConfig}-${PJPrefix}-subnet-6-a-private",
          }
        - {
            "Fn::ImportValue": !Sub "${EnvConfig}-${PJPrefix}-subnet-7-c-private",
          }

  # ------------------------------------------------------------#
  #  Db Cluster
  # ------------------------------------------------------------#
  DBCluster:
    Type: "AWS::RDS::DBCluster"
    DeletionPolicy: Snapshot
    Properties:
      Engine: !Ref DBEngineType
      EngineVersion: !Ref DBEngineVersion
      DatabaseName: !Ref DBName
      Port: !Ref DBPort
      MasterUsername: !Ref DBUserName
      MasterUserPassword: !Ref DBPasswordForAdmin
      DBClusterIdentifier: !Sub
        - "${EnvConfig}-${PJPrefix}-${DBClusterName}"
        - DBClusterName: !Ref DBClusterName
      BackupRetentionPeriod:
        !FindInMap [RDS, !Ref "EnvConfig", "BackupRetentionPeriod"]
      StorageEncrypted: !Ref IsEncryptedStorage
      DBSubnetGroupName: !Ref DBSubnetGroup
      DBClusterParameterGroupName: !Ref DBClusterParameterGroup
      # NOTE: テンプレート修正中のみfalseにする
      DeletionProtection: true
      CopyTagsToSnapshot: true
      EnableCloudwatchLogsExports:
        !FindInMap [RDS, !Ref "EnvConfig", "EnableCloudwatchLogsExports"]
      VpcSecurityGroupIds:
        - {
            "Fn::ImportValue": !Sub "${EnvConfig}-${PJPrefix}-rds-instance-sg",
          }
      Tags:
        - Key: "Name"
          Value: !Sub
            - "${EnvConfig}-${PJPrefix}-${DBClusterName}"
            - DBClusterName: !Ref DBClusterName
      PreferredMaintenanceWindow: "sun:16:00-sun:16:30"
      PreferredBackupWindow: "17:00-17:30"            

  # ------------------------------------------------------------#
  #  DBInstance Aurora(MySQL)
  # ------------------------------------------------------------#
  DBInstanceA:
    Type: "AWS::RDS::DBInstance"
    Properties:
      DBClusterIdentifier: !Ref DBCluster
      AvailabilityZone: !Sub "${AWS::Region}a"
      Engine: !Ref DBEngineType
      EngineVersion: !Ref DBEngineVersion
      DBInstanceIdentifier: !Sub "${EnvConfig}-${PJPrefix}-${DBInstanceName}-a"
      DBInstanceClass: !Ref DBInstanceClass
      DBSubnetGroupName: !Ref DBSubnetGroup
      PubliclyAccessible: false
      # NOTE: RDSのマイナーバージョン自動アップデート。※Security Hubではtrueを推奨
      AutoMinorVersionUpgrade: false
      CACertificateIdentifier: "rds-ca-rsa2048-g1"
      CopyTagsToSnapshot: true
      Tags:
        - Key: "Name"
          Value: !Sub "${EnvConfig}-${PJPrefix}-${DBInstanceName}-a"
      PreferredMaintenanceWindow: "mon:16:00-mon:16:30"

  DBInstanceC:
    Type: "AWS::RDS::DBInstance"
    Condition: IsCreateResource
    Properties:
      DBClusterIdentifier: !Ref DBCluster
      AvailabilityZone: !Sub "${AWS::Region}c"
      Engine: !Ref DBEngineType
      EngineVersion: !Ref DBEngineVersion
      DBInstanceIdentifier: !Sub "${EnvConfig}-${PJPrefix}-${DBInstanceName}-c"
      DBInstanceClass: !Ref DBInstanceClass
      DBSubnetGroupName: !Ref DBSubnetGroup
      PubliclyAccessible: false
      # NOTE: RDSのマイナーバージョン自動アップデート。※Security Hubではtrueを推奨
      AutoMinorVersionUpgrade: false
      CACertificateIdentifier: "rds-ca-rsa2048-g1"
      CopyTagsToSnapshot: true
      Tags:
        - Key: "Name"
          Value: !Sub "${EnvConfig}-${PJPrefix}-${DBInstanceName}-c"
      PreferredMaintenanceWindow: "tue:16:00-tue:16:30"

  # ------------------------------------------------------------#
  #  DBClusterParameterGroup
  # ------------------------------------------------------------#
  DBClusterParameterGroup:
    Type: "AWS::RDS::DBClusterParameterGroup"
    Properties:
      Description: !Sub
        - "RDS DB cluster parameter group for ${EnvConfig}-${PJPrefix}-${DBClusterName}"
        - DBClusterName: !Ref DBClusterName
      Family: "aurora-mysql8.0"
      Parameters:
        time_zone: "Asia/Tokyo"

  # ------------------------------------------------------------#
  #  RDS Proxy
  # ------------------------------------------------------------#
  RDSProxy:
    Type: "AWS::RDS::DBProxy"
    Properties:
      Auth:
        - AuthScheme: "SECRETS"
          IAMAuth: "DISABLED"
          SecretArn: !Ref SecretManagerArn
      DBProxyName: !Sub
        - "${EnvConfig}-${PJPrefix}-${ProxyName}"
        - ProxyName: !Ref DBProxyName
      EngineFamily: !Ref "ProxyEngineFamily"
      RoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/${EnvConfig}-${PJPrefix}-secrets-manager-role"
      VpcSecurityGroupIds:
        - { "Fn::ImportValue": !Sub "${EnvConfig}-${PJPrefix}-rds-proxy-sg" }
      VpcSubnetIds:
        - {
            "Fn::ImportValue": !Sub "${EnvConfig}-${PJPrefix}-subnet-6-a-private",
          }
        - {
            "Fn::ImportValue": !Sub "${EnvConfig}-${PJPrefix}-subnet-7-c-private",
          }

  RDSProxyTargetGroup:
    Type: "AWS::RDS::DBProxyTargetGroup"
    Properties:
      DBClusterIdentifiers:
        - !Ref DBCluster
      DBProxyName: !Ref RDSProxy
      TargetGroupName: default

  RDSProxyReaderEndpoint:
    Type: "AWS::RDS::DBProxyEndpoint"
    Properties:
      DBProxyEndpointName: "read-only-endpoint"
      DBProxyName: !Ref RDSProxy
      VpcSubnetIds:
        - {
            "Fn::ImportValue": !Sub "${EnvConfig}-${PJPrefix}-subnet-6-a-private",
          }
        - {
            "Fn::ImportValue": !Sub "${EnvConfig}-${PJPrefix}-subnet-7-c-private",
          }
      VpcSecurityGroupIds:
        - {
            "Fn::ImportValue": !Sub "${EnvConfig}-${PJPrefix}-rds-proxy-sg",
          }
      TargetRole: "READ_ONLY"
